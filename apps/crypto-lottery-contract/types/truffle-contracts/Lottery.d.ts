/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LotteryContract extends Truffle.Contract<LotteryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LotteryInstance>;
}

export interface LotteryRestart {
  name: "LotteryRestart";
  args: {
    _newLotteryExpiration: BN;
    0: BN;
  };
}

export interface RefundAllTickets {
  name: "RefundAllTickets";
  args: {
    _refundAllTickets: boolean;
    0: boolean;
  };
}

export interface TicketsBought {
  name: "TicketsBought";
  args: {
    _buyerAddress: string;
    _ticketsBought: BN;
    0: string;
    1: BN;
  };
}

export interface WinnerTicketDrawn {
  name: "WinnerTicketDrawn";
  args: {
    _winnerAddress: string;
    _winnersWinnings: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | LotteryRestart
  | RefundAllTickets
  | TicketsBought
  | WinnerTicketDrawn;

export interface LotteryInstance extends Truffle.ContractInstance {
  duration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  expiration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  lastWinner(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN }>;

  lotteryOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  lotteryOwnerTotalCommission(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  maxTickets(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  ticketCommission(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  ticketPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  tickets(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  winnings(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getTickets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getWinningsForAddress(
    addr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  BuyTickets: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  DrawWinnerTicket: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  restartLottery: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  checkWinningsAmount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  WithdrawWinnings: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  RefundAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  WithdrawCommission: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  IsWinner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  CurrentWinningReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  RemainingTickets(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    duration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    expiration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    lastWinner(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN }>;

    lotteryOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    lotteryOwnerTotalCommission(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    maxTickets(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    ticketCommission(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    ticketPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    tickets(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    winnings(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getTickets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getWinningsForAddress(
      addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    BuyTickets: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    DrawWinnerTicket: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    restartLottery: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    checkWinningsAmount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    WithdrawWinnings: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    RefundAll: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    WithdrawCommission: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    IsWinner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    CurrentWinningReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    RemainingTickets(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
